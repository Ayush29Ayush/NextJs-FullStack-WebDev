1. Ask ChatGPT to give 25 best practices for CSS with code snippets for each point.
2. Read and learn about GRID and FLEXBOX along with basic CSS.
3. Read docs of Tailwind CSS.
4. Read docs of Shadcn UI and Flowbite Tailwind CSS for components and learn how to use them.
------------------------------------------------------------------------------------------------

1. Go to "https://tailwindcss.com/docs/installation/using-postcss" where we want to do installation using PostCSS, then follow that steps to add tailwindcss to your project.
2. Do code cleaning and remove all unnecessary code.
3. Type rafce to get basic template for each component.
4. Go through tailwindcss docs.
5. 1 rem = 16px.
6. In tailwindcss, 1 means 4px so p-1 = padding: 4px;
7. All assets should be placed inside public folder.
8. Install React Icons.
9. Import Lato and playfair fonts in index.css file from src folder.
10. Go to tailwind.config.js and extend fontFamily with Lato and Playfair fonts.
11. NOTE - tailwind code in index.css should always be on top otherwise tailwind css will not work.

12. Use sm,md,lg for building responsive designs
13. Learn about flex and flex-1 property
14. Learn about order property

15. var:
a) Function-scoped: Variables declared with var are scoped to the nearest function, not necessarily the block in which they are declared. This can lead to unexpected behavior and potential bugs when using variables across different blocks.
b) Hoisting: var variables are hoisted to the top of their scope, meaning you can access them before their declaration. However, they will be undefined until their actual declaration in the code execution.
c) Reassignment and Redefinition: var variables can be both reassigned and redeclared within the same scope, which can sometimes lead to unintended consequences and make the code harder to reason about.

16. let:
a) Block-scoped: Variables declared with let are scoped to the nearest enclosing block, such as a loop, conditional, or function. This helps in preventing accidental variable leakage and promotes better code organization.
b) No Hoisting: Unlike var, let variables are not hoisted to the top of their scope. Accessing them before their declaration results in a ReferenceError, making the code behavior more predictable.
c) Reassignment, No Redefinition: let variables can be reassigned within the same scope, but they cannot be redeclared. This enforces clarity and prevents accidental shadowing of variables within the same block.

17. const:
a) Block-scoped: Similar to let, variables declared with const are block-scoped, meaning they are only accessible within the block in which they are defined.
b) No Hoisting: const variables are not hoisted, and accessing them before their declaration results in a ReferenceError, just like with let.
c) Immutable Value: Unlike var and let, const variables must be initialized upon declaration, and their value cannot be changed once assigned. This immutability ensures that the variable's value remains constant throughout its scope, enhancing code predictability and safety.

17. Always try to use const and let and miniimize use of var for better code quality and maintainability.

18. INTERVIEW QUES -> Difference between var, let and const
19. INTERVIEW QUES -> WHat is the datatype of null and undefined in JS?
20. == means equal to and === means strict equal to. For example, 0 == false and 0 === false.

21. INTERVIEW QUES -> What is the difference between == and ===?
22. console.log("2 x " + i + " = " + (2*i)); is just a string concatenation.
    console.log(`2 x ${i} = ${2*i}`); is a template string literal.

23. All array related concepts are added in arrays.js
24. JS is synchronous in nature but can be made asynchronous with the help of asynchronous methods like setTimeout, callback function, Promises, async/await.
25. Refer js file named "async_await_promises_timeout_callback.js"