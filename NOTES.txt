1. Ask ChatGPT to give 25 best practices for CSS with code snippets for each point.
2. Read and learn about GRID and FLEXBOX along with basic CSS.
3. Read docs of Tailwind CSS.
4. Read docs of Shadcn UI and Flowbite Tailwind CSS for components and learn how to use them.
------------------------------------------------------------------------------------------------

1. Go to "https://tailwindcss.com/docs/installation/using-postcss" where we want to do installation using PostCSS, then follow that steps to add tailwindcss to your project.
2. Do code cleaning and remove all unnecessary code.
3. Type rafce to get basic template for each component.
4. Go through tailwindcss docs.
5. 1 rem = 16px.
6. In tailwindcss, 1 means 4px so p-1 = padding: 4px;
7. All assets should be placed inside public folder.
8. Install React Icons.
9. Import Lato and playfair fonts in index.css file from src folder.
10. Go to tailwind.config.js and extend fontFamily with Lato and Playfair fonts.
11. NOTE - tailwind code in index.css should always be on top otherwise tailwind css will not work.

12. Use sm,md,lg for building responsive designs
13. Learn about flex and flex-1 property
14. Learn about order property

15. var:
a) Function-scoped: Variables declared with var are scoped to the nearest function, not necessarily the block in which they are declared. This can lead to unexpected behavior and potential bugs when using variables across different blocks.
b) Hoisting: var variables are hoisted to the top of their scope, meaning you can access them before their declaration. However, they will be undefined until their actual declaration in the code execution.
c) Reassignment and Redefinition: var variables can be both reassigned and redeclared within the same scope, which can sometimes lead to unintended consequences and make the code harder to reason about.

16. let:
a) Block-scoped: Variables declared with let are scoped to the nearest enclosing block, such as a loop, conditional, or function. This helps in preventing accidental variable leakage and promotes better code organization.
b) No Hoisting: Unlike var, let variables are not hoisted to the top of their scope. Accessing them before their declaration results in a ReferenceError, making the code behavior more predictable.
c) Reassignment, No Redefinition: let variables can be reassigned within the same scope, but they cannot be redeclared. This enforces clarity and prevents accidental shadowing of variables within the same block.

17. const:
a) Block-scoped: Similar to let, variables declared with const are block-scoped, meaning they are only accessible within the block in which they are defined.
b) No Hoisting: const variables are not hoisted, and accessing them before their declaration results in a ReferenceError, just like with let.
c) Immutable Value: Unlike var and let, const variables must be initialized upon declaration, and their value cannot be changed once assigned. This immutability ensures that the variable's value remains constant throughout its scope, enhancing code predictability and safety.

17. Always try to use const and let and minimize use of var for better code quality and maintainability.

INTERVIEW QUES => What are the different types of scopes in JavaScript?
Ans) Block scope, function scope, global scope, script scope and module scope

18. INTERVIEW QUES -> Difference between var, let and const
19. INTERVIEW QUES -> WHat is the datatype of null and undefined in JS?
20. == means equal to and === means strict equal to. For example, 0 == false and 0 === false.

21. INTERVIEW QUES -> What is the difference between == and ===?
22. console.log("2 x " + i + " = " + (2*i)); is just a string concatenation.
    console.log(`2 x ${i} = ${2*i}`); is a template string literal.

23. All array related concepts are added in arrays.js
24. JS is synchronous in nature but can be made asynchronous with the help of asynchronous methods like setTimeout, callback function, Promises, async/await.
25. Refer js file named "async_await_promises_timeout_callback.js"
26. Refer js file named "Objects,Object_inside_Array,Function_inside_Function,Lexical_Scope,This_keyword,New_and_Symbol.js"
27. Refer js file named "proto,prototype,class.js". Main is the usage of class here.
28. Refer DOM folder for DOM related concepts.
29. Selectors in DOM => getElementById, getElementsByClassName, getElementsByTagName, querySelector, querySelectorAll

# React
1. npx create-react-app my-app .
2. Remove all unnecessary code and run npm start
3. Create a component named App.js, A should be capital as it is a component.
4. components are created so that we can reuse them in different places.
5. Type rafce or rfce to get basic template for each component.
6. JSX is a syntax extension for JavaScript that looks similar to XML or HTML, allowing you to write React components using a familiar markup style. While JavaScript (JS) is a programming language, JSX is a syntax that allows you to write HTML-like code within JavaScript. The main difference is that JSX gets transformed into JavaScript before it is interpreted by the browser.
7. Any variable's value can be displayed inside a fragment of the component if we enclose it in curly braces i.e {}.
8. Create a App.css file and add all the css code inside it. These styles can be used by importing it in App.js file.
9. Another way to add styling is to use style tag. Ex => <div style={{color:"red"}}>Hello World</div>
10. Components can be made dynamic by using props. Ex => <h1>Hello {props.name}</h1>
11. props can be passed as an object or as an array of objects.
12. We can use props by props.name or we can destructure the props and use the attribute directly.
13. We can use array of objects as props and then use map function, for loop and forEach function to pass the objects in the array or the json array to the component one at a time.
14. In react, we use useState hook to manage the state of the component. Ex => const [count,setCount] = useState(0); where count is the state and setCount is the function to set the state.
15. filter() and map() are used to manipulate the array. They run over each item in each iteration.
.filter is used to create a new array with elements that pass a certain condition. It works on the basis of boolean values provided by running the condition i.e true or false.
"<!DOCTYPE html>
<html>
<body>

<h1>JavaScript Arrays</h1>
<h2>The filter() Method</h2>

<p>Click "Test" to get every element in the array that has a value above this number:</p>

<p><input type="number" id="ageToCheck" value="30"></p>
<button onclick="myFunction()">Test</button>

<p id="demo"></p>

<script>
const ages = [32, 33, 12, 40];

function checkAge(age) {
  return age > document.getElementById("ageToCheck").value;
}

function myFunction() {
  document.getElementById("demo").innerHTML = ages.filter(checkAge);
}
</script>

</body>
</html>"

.map is used to create a new array by transforming each element in the original array.
#! .map using Normal Function
"
const numbers = [65, 44, 12, 4];
const newArr = numbers.map(myFunction)

function myFunction(num) {
  return num * 10;
}
"
#! .map using Arrow Function
"
* let myFunction = (a, b) => a * b;
"
"
fetch('https://restcountries.com/v3.1/all')
      .then((response) => {
        if (response.ok) return response.json();
      })
      .then((data) => {
        const countryNamess = data.map((country) => country.name.common);
        setCountries(countryNamess);
      })
      .catch((error) => console.error(error));
"

16. Using filter, we can create a new array with elements that pass a certain condition. This acts as removing the element from the overall data whose id is passed to the function. Ex => const filteredArray = arr.filter((item)=> item.id === id); Check Data.js file
17. Using map, we can create a new array by transforming each element in the original array. This acts as changing any field of any particular element whose id is passed to the function. Check Data.js file


# HOOKS - useState (React/02)
18. See difference between "Multiple States with Multiple Inputs States" and "Multiple States with Single Inputs States" in Form.js file

# HOOKS - useEffect (React/03)
19. useEffect is used to execute the code when a specific event happens like getting the loading animation, clicking on a button, changing state of a component etc.
20. If you add a return statement inside a useEffect, it will act as a clean state of the component. Check useEffect.js file

# FETCH using useEffect (React/03)
21. https://api.github.com/ => List of free API from GitHub
22. We will be using https://api.github.com/users/ => List of users
23. You can also use "https://freeapi.app/" from Hitesh Choudhary.
24. Check Fetch.js file to see how to use FetchAPI with useEffect hook.
25. Check MultipleReturn.js file to see how to get data from API using FetchAPI along with try catch error handling. We have also used async await along with useState for loaders and errors.
'''
useEffect(() => {
  fetch("https://api.github.com/users")
    .then((response) => {
      // Check if the response was successful
      if (response.ok) {
        return response.json(); // Proceed to parse JSON if the response is OK
      } else {
        throw new Error('Network response was not ok'); // Throw an error if the response is not OK
      }
    })
    .then((json_data) => {
      setUsers(json_data); // Set users state with the parsed JSON data
    })
    .catch((error) => {
      console.error('There has been a problem with your fetch operation:', error);
    });
}, []);
'''

# HOOKS - CONTEXT API - useContext (React/04)
26. Read this => https://medium.com/javascript-in-plain-english/how-to-manage-state-with-usereducer-and-context-api-3f0ea40a3ac3
27. Without context api, if we want to pass data from parent to child component, we have to pass it in the form of props. This is not the best way to do it. We can use context api.
28. The parent component will use useContext.Provider to pass the data to the child component. The child component will use useContext.Consumer to get the data from the parent component. 
29. <GreetContext.Provider value={greet}><div></div></GreetContext.Provider> when there is only one value to be passed. <GreetContext.Provider value={{greet,greet2}}><div></div></GreetContext.Provider> when there are multiple values to be passed.
30. Rather than creating nested useContext.Consumer, we can use useContext hook in the child component. Ex => const useCon = useContext(GreetContext);
31. Access the data using useCon. Ex => useCon.greet and useCon.greet2.

# HOOKS - CONTEXT API - useReducer (React/05)
32. Similar to useState
33. Reducer function is a pure function and has 2 parameters, state and action
34. Reducer is the coffee maker, state is the coffee powder and action is the milk. New state is returned which is the coffee.
35. Refer useReducer.js file
36. Refer useReducerExample.js file

#! IMPORTANT
37. Best combo for dynamic state management => use useReducer and useContext
38. Define a initial state and then define a reducer function to handle state management changes.
39. Then use useContext to pass the state from one component to another.
'''
import React, { useState } from "react";

const initialState = {counter: 0};

const reducer = (state, action) => {
  switch (action.type) {
    case "increment":
      return { counter: state.counter + 1 };
    case "decrement":
      return { counter: state.counter - 1 };
    case "reset":
      return initialState;
    default:
      return state;
  }
};

const UseReducer = () => {
  //! using useState hook
  const [count, setCount] = useState(0); 

  //! using useReducer hook
  const [state, dispatch] = React.useReducer(reducer, initialState);
  const increment = () => {
    dispatch({ type: "increment" });
  };

  const decrement = () => {
    dispatch({ type: "decrement" });
  };

  const reset = () => {
    dispatch({ type: "reset" });
  };

  return (
    <div>
      <h1>useReducer_Script</h1>
      <h1>{count}</h1>
      <button onClick={() => setCount(count+1)}>Plus</button>
      <button onClick={() => setCount(count-1)}>Minus</button>
      <h1>-----------------</h1>
      <h1>{state.counter}</h1>
      <button onClick={reset}>Reset</button>
      <button onClick={increment}>increment</button>
      <button onClick={decrement}>decrement</button>
    </div>
  );
};

export default UseReducer;
'''

# HOOKS - useRef
40. The useRef Hook allows you to persist values between renders. It can be used to store a mutable value that does not cause a re-render when updated.
41. For example check UseRefEx.js file
42. When we used const [count, setCount] = React.useState(0); and updated the count value, the console.log("The component have been rendered..."); in the useEffect got called everytime due to re-rendering but when we used const count = React.useRef(0); and updated the count value, the console.log("The component have been rendered..."); in the useEffect got called only once. Refer UseRefEx2.js file
43. useRef helps us update the value of a state variable without unnecessary re-rendering.

# REACT ROUTER
44. The 3 main components of React Router => import { BrowserRouter, Routes, Route } from "react-router-dom";
45. First comes the BrowserRouter and then Routes and then Route.
46. Use the Link component to navigate between pages. Ex => <Link to="/about">About</Link>

# FORM VALIDATION
47. Refer FormVal.js file to see how to use form validation using useState.
48. Refer FormValReactHookForms.js file to see how to use form validation using React Hook Forms.

--------------------------------------------------

#! Project - Youtube Clone
1. cd youtube-clone
2. npx create-react-app .
3. Go to "https://tailwindcss.com/docs/installation/using-postcss" and follow that steps to add tailwindcss to your project.
"
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init
"
Add this to index.css
"
@tailwind base;
@tailwind components;
@tailwind utilities;
"
Add these to your tailwind.config.js
"
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{html,js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
}
"

#? Step 1: reate the Navbar for the project
* npm install react-icons --save
* Create a Navbar component and use it in the Home Component. Use the Home Component in App.js
* Add these to main CSS file of your project i.e index.css. These are the fonts we get from google fonts and we have set some CSS properties for the body tag 
"
@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;1,100&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;1,100;1,300;1,400&display=swap');

body {
    margin: 0;
    background-color: #181818;
    color: #fff;
    font-family: 'Roboto', sans-serif;
}

@tailwind base;
@tailwind components;
@tailwind utilities;
"
** Navbar.js
'''
import React from "react";
import { GiHamburgerMenu } from "react-icons/gi";
import { FaYoutube } from "react-icons/fa";
import { AiOutlineSearch } from "react-icons/ai";
import { FaMicrophone } from "react-icons/fa";
import { RiVideoAddLine } from "react-icons/ri";
import { BsBell } from "react-icons/bs";

const Navbar = () => {
  return (
    // <div className="flex justify-between items-center px-14 h-14 bg-[#212121] opacity-95 sticky text-white">
    <div className="flex justify-between items-center px-14 h-14 bg-[#212121] opacity-95 sticky">
      {/* left side */}
      <div className="flex gap-8 items-center text-2xl">
        <div>
          <GiHamburgerMenu />
        </div>
        <div className="flex gap-1 items-center justify-center">
          <FaYoutube className="text-4xl text-red-600" />
          <span className="text-2xl font-bold">Youtube</span>
        </div>
      </div>
      {/* middle */}
      <div className="flex items-center justify-center gap-5">
        <form action="">
          <div className="flex bg-zinc-900 items-center h-10 px-4 pr-2 rounded-3xl">
            <div className="flex gap-5 items-center pr-5">
              <input
                type="text"
                placeholder="Search"
                className="w-96 bg-zinc-900 focus:outline-none border-none"
              />
            </div>
            <button className="h-10 w-14 flex items-center justify-center bg-zinc-900 rounded-r-3xl">
              <AiOutlineSearch className="text-xl" />
            </button>
          </div>
        </form>
        <div className="text-xl p-3 bg-zinc-900 rounded-full">
          <FaMicrophone />
        </div>
      </div>
      {/* right side */}
      <div className="flex gap-8 items-center text-xl">
        <RiVideoAddLine />
        <div className="relative">
          <BsBell />
          <span className="absolute bottom-2 left-2 text-xs bg-red-600 rounded-full px-1">
            {" "}
            9+{" "}
          </span>
        </div>
        <img
          src="https://yt3.ggpht.com/yti/ANjgQV8xHZeyaYudL334pMLQ8p1wmfU7Jbc2iIwpZu7T0laeEX0=s88-c-k-c0x00ffffff-no-rj"
          alt="profile logo"
          className="w-9 h-9 rounded-full"
        />
      </div>
    </div>
  );
};

export default Navbar;
'''